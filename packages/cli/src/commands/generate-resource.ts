/**
 * Generate Resource Command
 * Creates a complete resource with CRUD operations
 */

import fs from 'node:fs/promises'
import path from 'node:path'
import pc from 'picocolors'
import { fileExists, ensureDir, pascalCase, camelCase, pluralize } from '../utils.js'

export interface GenerateResourceOptions {
  path: string
  fields: string
  list: boolean
  create: boolean
  edit: boolean
  show: boolean
}

export async function generateResource(
  name: string,
  options: GenerateResourceOptions
): Promise<void> {
  console.log(pc.blue('🚀 Generating resource:'), pc.bold(name))
  console.log()

  const resourceName = pascalCase(name)
  const resourceNameLower = camelCase(name)
  const resourceNamePlural = pluralize(resourceNameLower)
  const outputPath = path.resolve(process.cwd(), options.path)

  // Parse fields
  const fields = parseFields(options.fields)

  try {
    // Ensure output directory exists
    await ensureDir(outputPath)

    // Generate resource file
    const resourceFile = path.join(outputPath, `${resourceNameLower}.ts`)
    if (await fileExists(resourceFile)) {
      console.log(pc.yellow('⚠️  Resource file already exists:'), resourceFile)
      console.log(pc.yellow('   Skipping resource generation'))
    } else {
      const resourceContent = generateResourceContent(resourceName, fields)
      await fs.writeFile(resourceFile, resourceContent, 'utf-8')
      console.log(pc.green('✓'), 'Created resource:', pc.dim(resourceFile))
    }

    // Generate pages
    const pagesPath = path.join(outputPath, '..', 'pages', resourceNamePlural)
    await ensureDir(pagesPath)

    if (options.list) {
      const listFile = path.join(pagesPath, 'ListPage.tsx')
      const listContent = generateListPageContent(resourceName, resourceNameLower, fields)
      await fs.writeFile(listFile, listContent, 'utf-8')
      console.log(pc.green('✓'), 'Created list page:', pc.dim(listFile))
    }

    if (options.create) {
      const createFile = path.join(pagesPath, 'CreatePage.tsx')
      const createContent = generateCreatePageContent(resourceName, resourceNameLower, fields)
      await fs.writeFile(createFile, createContent, 'utf-8')
      console.log(pc.green('✓'), 'Created create page:', pc.dim(createFile))
    }

    if (options.edit) {
      const editFile = path.join(pagesPath, 'EditPage.tsx')
      const editContent = generateEditPageContent(resourceName, resourceNameLower, fields)
      await fs.writeFile(editFile, editContent, 'utf-8')
      console.log(pc.green('✓'), 'Created edit page:', pc.dim(editFile))
    }

    if (options.show) {
      const showFile = path.join(pagesPath, 'ShowPage.tsx')
      const showContent = generateShowPageContent(resourceName, resourceNameLower, fields)
      await fs.writeFile(showFile, showContent, 'utf-8')
      console.log(pc.green('✓'), 'Created show page:', pc.dim(showFile))
    }

    console.log()
    console.log(pc.green('✨ Resource generated successfully!'))
    console.log()
    console.log(pc.dim('Next steps:'))
    console.log(pc.dim('1. Import the resource in your app'))
    console.log(pc.dim('2. Add routes for the pages'))
    console.log(pc.dim('3. Configure your data provider'))
  } catch (error) {
    console.error(pc.red('❌ Error generating resource:'), error)
    process.exit(1)
  }
}

interface Field {
  name: string
  type: string
}

function parseFields(fieldsStr: string): Field[] {
  if (!fieldsStr) {
    return [
      { name: 'name', type: 'string' },
      { name: 'description', type: 'string' },
    ]
  }

  return fieldsStr.split(',').map((field) => {
    const [name, type = 'string'] = field.trim().split(':')
    return { name: name!, type }
  })
}

function generateResourceContent(resourceName: string, fields: Field[]): string {
  const fieldDefs = fields.map((f) => `  ${f.name}: ${f.type}`).join('\n')

  return `/**
 * ${resourceName} Resource
 * Generated by Filact CLI
 */

import { defineResource } from '@filact/core'
import { z } from 'zod'

export interface ${resourceName} {
  id: string | number
${fieldDefs}
  createdAt?: string
  updatedAt?: string
}

export const ${camelCase(resourceName)}Resource = defineResource<${resourceName}>({
  name: '${resourceName}',
  endpoint: '/${pluralize(camelCase(resourceName))}',

  schema: z.object({
${fields.map((f) => `    ${f.name}: z.${f.type}(),`).join('\n')}
  }),

  columns: [
${fields.map((f) => `    { accessorKey: '${f.name}', header: '${pascalCase(f.name)}' },`).join('\n')}
  ],

  form: {
    fields: [
${fields.map((f) => `      { name: '${f.name}', type: '${getFieldType(f.type)}', label: '${pascalCase(f.name)}' },`).join('\n')}
    ],
  },
})
`
}

function generateListPageContent(
  resourceName: string,
  resourceNameLower: string,
  fields: Field[]
): string {
  return `/**
 * ${resourceName} List Page
 * Generated by Filact CLI
 */

import { ListPage } from '@filact/core'
import { ${resourceNameLower}Resource } from '../../resources/${resourceNameLower}'

export function ${resourceName}ListPage() {
  return (
    <ListPage
      config={${resourceNameLower}Resource}
      enableSearch
      enableColumnVisibility
      enableExport
    />
  )
}
`
}

function generateCreatePageContent(
  resourceName: string,
  resourceNameLower: string,
  fields: Field[]
): string {
  return `/**
 * ${resourceName} Create Page
 * Generated by Filact CLI
 */

import { CreatePage } from '@filact/core'
import { ${resourceNameLower}Resource } from '../../resources/${resourceNameLower}'

export function ${resourceName}CreatePage() {
  return (
    <CreatePage
      config={${resourceNameLower}Resource}
    />
  )
}
`
}

function generateEditPageContent(
  resourceName: string,
  resourceNameLower: string,
  fields: Field[]
): string {
  return `/**
 * ${resourceName} Edit Page
 * Generated by Filact CLI
 */

import { EditPage } from '@filact/core'
import { ${resourceNameLower}Resource } from '../../resources/${resourceNameLower}'
import { useParams } from 'react-router-dom'

export function ${resourceName}EditPage() {
  const { id } = useParams<{ id: string }>()

  if (!id) {
    return <div>Missing ID</div>
  }

  return (
    <EditPage
      config={${resourceNameLower}Resource}
      id={id}
    />
  )
}
`
}

function generateShowPageContent(
  resourceName: string,
  resourceNameLower: string,
  fields: Field[]
): string {
  return `/**
 * ${resourceName} Show Page
 * Generated by Filact CLI
 */

import { ShowPage } from '@filact/core'
import { ${resourceNameLower}Resource } from '../../resources/${resourceNameLower}'
import { useParams } from 'react-router-dom'

export function ${resourceName}ShowPage() {
  const { id } = useParams<{ id: string }>()

  if (!id) {
    return <div>Missing ID</div>
  }

  return (
    <ShowPage
      config={${resourceNameLower}Resource}
      id={id}
    />
  )
}
`
}

function getFieldType(zodType: string): string {
  const typeMap: Record<string, string> = {
    string: 'text',
    number: 'number',
    boolean: 'checkbox',
    date: 'date',
  }
  return typeMap[zodType] || 'text'
}
