/**
 * Generate Component Command
 * Creates a custom React component
 */

import fs from 'node:fs/promises'
import path from 'node:path'
import pc from 'picocolors'
import { fileExists, ensureDir, pascalCase } from '../utils.js'

export interface GenerateComponentOptions {
  path: string
  type: 'functional' | 'class'
  withTest: boolean
  withStories: boolean
}

export async function generateComponent(
  name: string,
  options: GenerateComponentOptions
): Promise<void> {
  console.log(pc.blue('üöÄ Generating component:'), pc.bold(name))
  console.log()

  const componentName = pascalCase(name)
  const outputPath = path.resolve(process.cwd(), options.path)

  try {
    // Ensure output directory exists
    await ensureDir(outputPath)

    // Generate component file
    const componentFile = path.join(outputPath, `${componentName}.tsx`)
    if (await fileExists(componentFile)) {
      console.log(pc.yellow('‚ö†Ô∏è  Component file already exists:'), componentFile)
      console.log(pc.yellow('   Skipping component generation'))
    } else {
      const componentContent =
        options.type === 'class'
          ? generateClassComponent(componentName)
          : generateFunctionalComponent(componentName)
      await fs.writeFile(componentFile, componentContent, 'utf-8')
      console.log(pc.green('‚úì'), 'Created component:', pc.dim(componentFile))
    }

    // Generate test file
    if (options.withTest) {
      const testFile = path.join(outputPath, `${componentName}.test.tsx`)
      const testContent = generateTestFile(componentName)
      await fs.writeFile(testFile, testContent, 'utf-8')
      console.log(pc.green('‚úì'), 'Created test file:', pc.dim(testFile))
    }

    // Generate Storybook stories
    if (options.withStories) {
      const storiesFile = path.join(outputPath, `${componentName}.stories.tsx`)
      const storiesContent = generateStoriesFile(componentName)
      await fs.writeFile(storiesFile, storiesContent, 'utf-8')
      console.log(pc.green('‚úì'), 'Created stories file:', pc.dim(storiesFile))
    }

    console.log()
    console.log(pc.green('‚ú® Component generated successfully!'))
    console.log()
    console.log(pc.dim('Next steps:'))
    console.log(pc.dim('1. Implement your component logic'))
    console.log(pc.dim('2. Add props and types as needed'))
    console.log(pc.dim('3. Write tests for your component'))
  } catch (error) {
    console.error(pc.red('‚ùå Error generating component:'), error)
    process.exit(1)
  }
}

function generateFunctionalComponent(name: string): string {
  return `/**
 * ${name} Component
 * Generated by Filact CLI
 */

export interface ${name}Props {
  /** Component children */
  children?: React.ReactNode

  /** Custom className */
  className?: string
}

/**
 * ${name} Component
 */
export function ${name}({ children, className = '' }: ${name}Props) {
  return (
    <div className={className}>
      <h2>${name}</h2>
      {children}
    </div>
  )
}
`
}

function generateClassComponent(name: string): string {
  return `/**
 * ${name} Component
 * Generated by Filact CLI
 */

import { Component } from 'react'

export interface ${name}Props {
  /** Component children */
  children?: React.ReactNode

  /** Custom className */
  className?: string
}

export interface ${name}State {
  // Add state properties here
}

/**
 * ${name} Component
 */
export class ${name} extends Component<${name}Props, ${name}State> {
  constructor(props: ${name}Props) {
    super(props)
    this.state = {}
  }

  render() {
    const { children, className = '' } = this.props

    return (
      <div className={className}>
        <h2>${name}</h2>
        {children}
      </div>
    )
  }
}
`
}

function generateTestFile(name: string): string {
  return `import { describe, it, expect } from 'vitest'
import { render, screen } from '@testing-library/react'
import { ${name} } from './${name}'

describe('${name}', () => {
  it('should render', () => {
    render(<${name}>Test content</${name}>)

    expect(screen.getByText('${name}')).toBeInTheDocument()
    expect(screen.getByText('Test content')).toBeInTheDocument()
  })

  it('should apply custom className', () => {
    const { container } = render(<${name} className="custom-class" />)

    expect(container.firstChild).toHaveClass('custom-class')
  })
})
`
}

function generateStoriesFile(name: string): string {
  return `import type { Meta, StoryObj } from '@storybook/react'
import { ${name} } from './${name}'

const meta = {
  title: 'Components/${name}',
  component: ${name},
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    className: { control: 'text' },
  },
} satisfies Meta<typeof ${name}>

export default meta
type Story = StoryObj<typeof meta>

export const Default: Story = {
  args: {
    children: 'Default content',
  },
}

export const WithCustomClass: Story = {
  args: {
    children: 'Custom styled content',
    className: 'bg-blue-100 p-4 rounded',
  },
}
`
}
